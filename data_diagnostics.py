import pandas as pd
import os

def find_nuisance_trials(path):
    ''' This function takes a path of a formatted csv from 
    extract_data.py and returns a dataframe of nuisance trials
    including the subject_id, trial number, trial type, and 
    reason for exclusion.'''

    df = pd.read_csv(path)
    output = pd.DataFrame(columns=['sub_id', 'trial_num',
                                   'trial_type', 'reason'])
    reasons = ['Negative RT', 'Empty Fixation', 'RT < 0.3',
               'RT > 10']
    
    parts = path.replace('.csv', '').split('_')
    
    for index, trial in df.iterrows():
        if trial['RT'] < 0:
            output.loc[len(output)] = [parts[1][-3:], index + 1, parts[2], reasons[0]]
        elif trial['RT'] < 0.3:
            output.loc[len(output)] = [parts[1][-3:], index + 1, parts[2], reasons[2]]
        elif trial['RT'] > 10:
            output.loc[len(output)] = [parts[1][-3:], index + 1, parts[2], reasons[3]]
        elif len(trial['fixation']) == 0:
            output.loc[len(output)] = [parts[1][-3:], index + 1, parts[2], reasons[1]]
    
    return output

def find_nuisance_subjects(path):
    ''' This function takes a path of all extracted samples from 
    extract_data.py and returns a dataframe of nuisance subjects
    including the subject_id, trial_type, reason for exclusion.'''

    output = pd.DataFrame(columns=['sub_id', 'trial_type', 'reason'])

    reasons = ['Mean RT < 0.7', 'Mean RT > 6', 'Choice correlation < 70%', '> 10% missing fixations']

    for item in os.listdir(path):
        df = pd.read_csv(os.path.join(path, item))

        parts = item.replace('.csv', '').split('_')

        if df['RT'].mean() < 0.7:
            output.loc[len(output)] = [parts[1][-3:], parts[2], reasons[0]]
        elif df['RT'].mean() > 6:
            output.loc[len(output)] = [parts[1][-3:], parts[2], reasons[1]]
        else:
            missing_fixations = 0
            incorrect_choices = 0
            for _, trial in df.iterrows():
                if trial['choice'] == 1 and trial['avgWTP_left'] > trial['avgWTP_right'] or trial['choice'] == 0 and trial['avgWTP_left'] < trial['avgWTP_right']:
                    incorrect_choices += 1
                if len(trial['fixation']) == 0:
                    missing_fixations += 1
            if missing_fixations > len(df) * 0.1:
                output.loc[len(output)] = [parts[1][-3:], parts[2], reasons[3]]
            elif incorrect_choices > len(df) * 0.7:
                output.loc[len(output)] = [parts[1][-3:], parts[2], reasons[2]]

    return output

def clean_samples(path):
    ''' This function takes a path pointing to the directory
    of samples generated by extract_data.py. It then removes 
    any negative RT trials. The resulting dataframe is
    converted to csv and placed in a new folder.'''

    output_dir = '/Users/braydenchien/Desktop/Enkavilab/DDM/filteredsamples'

    for item in os.listdir(path):
        df = pd.read_csv(os.path.join(path, item))
        df_clean = df[df['RT'] >= 0]
        df_clean.to_csv(os.path.join(output_dir, item), index=False)